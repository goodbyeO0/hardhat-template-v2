{
  "address": "0x7d1E59d09729ab9E90330718f53212b8F184d5fB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "atcCode",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "associateItemWithUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customerTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "atcCode",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            }
          ],
          "internalType": "struct HealthItemPurchase.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "getReceiptDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "receiptId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "itemIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "totalPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            }
          ],
          "internalType": "struct HealthItemPurchase.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReceipts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "itemToOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "atcCode",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "mintReceipt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        }
      ],
      "name": "purchaseItems",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receipts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userReceipts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08f98cccc3182aa7579cd80db8a5e9e8a4a1da59eb3a019a6301ddcee13f6477",
  "receipt": {
    "to": null,
    "from": "0x93Ab4B67E111FcD35D58CfA10E1a433114E82A5a",
    "contractAddress": "0x7d1E59d09729ab9E90330718f53212b8F184d5fB",
    "transactionIndex": 0,
    "gasUsed": "4369752",
    "logsBloom": "0x
    "blockHash": "0xefedfea7e4846ad984e83637bc645ff76de8ca9e67a8d0bcfa4d2066a4a309a0",
    "transactionHash": "0x08f98cccc3182aa7579cd80db8a5e9e8a4a1da59eb3a019a6301ddcee13f6477",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6154325,
        "transactionHash": "0x08f98cccc3182aa7579cd80db8a5e9e8a4a1da59eb3a019a6301ddcee13f6477",
        "address": "0x7d1E59d09729ab9E90330718f53212b8F184d5fB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000093ab4b67e111fcd35d58cfa10e1a433114e82a5a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xefedfea7e4846ad984e83637bc645ff76de8ca9e67a8d0bcfa4d2066a4a309a0"
      }
    ],
    "blockNumber": 6154325,
    "cumulativeGasUsed": "4369752",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6deab45bd73137f7cb9c3ba45a941336",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"atcCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"associateItemWithUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customerTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"atcCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"internalType\":\"struct HealthItemPurchase.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"getReceiptDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"internalType\":\"struct HealthItemPurchase.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReceipts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"atcCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"mintReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"purchaseItems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userReceipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HealthItemPurchase.sol\":\"HealthItemPurchase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/HealthItemPurchase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract HealthItemPurchase is ERC721URIStorage, Ownable {\\n    // Define the structure of an Item\\n    struct Item {\\n        uint256 id; // Unique identifier for the item\\n        string name; // Name of the item\\n        uint256 price; // Price of the item in wei\\n        string atcCode; // ATC code of the item\\n        string imageUri; // URI to the image of the item\\n        string description; // Description of the item\\n        string tokenUri; // URI for the token metadata\\n    }\\n\\n    // Define the structure of a Receipt\\n    struct Receipt {\\n        uint256 receiptId; // Unique identifier for the receipt\\n        address buyer; // Address of the buyer\\n        uint256[] itemIds; // List of item IDs included in this receipt\\n        uint256 totalPrice; // Total price of the items in wei\\n        uint256 purchaseDate; // Timestamp of the purchase\\n        string tokenUri; // URI for the token metadata\\n    }\\n\\n    uint256 private receiptCounter; // Counter to generate unique receipt IDs\\n    uint256 private itemCounter; // Counter to generate unique item IDs\\n    mapping(uint256 => Item) public items; // Mapping from item ID to Item details\\n    mapping(uint256 => Receipt) public receipts; // Mapping from receipt ID to Receipt details\\n    mapping(address => uint256[]) public userReceipts; // Mapping from user address to list of receipt IDs\\n    mapping(uint256 => address) public itemToOwner; // Mapping from item ID to the address of the owner\\n    mapping(address => uint256) private pendingPayments; // Mapping from user to pending payment amount\\n\\n    // New mapping to track the number of tokens each customer has\\n    mapping(address => uint256) public customerTokens;\\n\\n    // Reserve a range for receipt IDs, assuming item IDs will not exceed 1,000,000\\n    uint256 constant RECEIPT_ID_START = 1000000;\\n    uint256 constant DISCOUNT_THRESHOLD = 5; // Number of tokens needed to get a discount\\n    uint256 constant DISCOUNT_PERCENTAGE = 10; // Discount percentage\\n\\n    // Constructor to initialize the ERC721 contract with name and symbol\\n    constructor() ERC721(\\\"HealthItemNFT\\\", \\\"HINFT\\\") Ownable(msg.sender) {}\\n\\n    // Function to add a new item to the contract\\n    // Only callable by the owner of the contract\\n    function addItem(\\n        string memory name,\\n        uint256 price,\\n        string memory atcCode,\\n        string memory imageUri,\\n        string memory description,\\n        string memory tokenUri\\n    ) external onlyOwner {\\n        itemCounter++;\\n        items[itemCounter] = Item(\\n            itemCounter,\\n            name,\\n            price,\\n            atcCode,\\n            imageUri,\\n            description,\\n            tokenUri\\n        );\\n\\n        // Mint NFT for the item\\n        _mint(owner(), itemCounter);\\n        _setTokenURI(itemCounter, tokenUri);\\n    }\\n\\n    // Function to associate an item with a specific user address\\n    // Only callable by the owner of the contract\\n    function associateItemWithUser(\\n        uint256 itemId,\\n        address userAddress\\n    ) external onlyOwner {\\n        require(items[itemId].id != 0, \\\"Item does not exist\\\"); // Check if item exists\\n        itemToOwner[itemId] = userAddress; // Set the owner of the item internally\\n        // Do not transfer the NFT here, just associate the item\\n    }\\n\\n    // Function to purchase items\\n    // The caller must send enough ETH to cover the total price of the items\\n    function purchaseItems(\\n        uint256[] memory itemIds\\n    ) external payable returns (bool) {\\n        uint256 totalPrice = 0;\\n\\n        // Calculate the total price of the items\\n        for (uint256 i = 0; i < itemIds.length; i++) {\\n            require(\\n                itemToOwner[itemIds[i]] == msg.sender,\\n                \\\"Transaction sender does not own these items\\\"\\n            ); // Ensure the caller owns the items\\n            totalPrice += items[itemIds[i]].price; // Sum up the total price\\n        }\\n\\n        // Check if the customer has enough tokens for a discount\\n        if (customerTokens[msg.sender] >= DISCOUNT_THRESHOLD) {\\n            uint256 discountAmount = (totalPrice * DISCOUNT_PERCENTAGE) / 100;\\n            totalPrice -= discountAmount; // Apply the discount\\n            customerTokens[msg.sender] = 0; // Reset the tokens after applying the discount\\n        }\\n\\n        require(\\n            msg.value >= totalPrice,\\n            \\\"Insufficient funds to complete the purchase\\\"\\n        ); // Ensure sufficient funds are provided\\n\\n        // Transfer each item NFT to the buyer\\n        for (uint256 i = 0; i < itemIds.length; i++) {\\n            _transfer(owner(), msg.sender, itemIds[i]); // Transfer ownership of each item NFT\\n            itemToOwner[itemIds[i]] = msg.sender; // Update the item owner mapping\\n        }\\n\\n        pendingPayments[msg.sender] = totalPrice; // Record the payment amount for the user\\n\\n        // Check if the payment exceeds 0.005 ETH, if so, give the customer 1 token\\n        if (msg.value > 0.005 ether) {\\n            customerTokens[msg.sender]++;\\n        }\\n\\n        return true; // Return true to indicate successful payment\\n    }\\n\\n    // Function to mint a receipt after purchase\\n    // Only callable by the owner of the contract\\n    function mintReceipt(\\n        address recipient,\\n        uint256[] memory itemIds,\\n        string memory tokenUri\\n    ) external onlyOwner {\\n        require(itemIds.length > 0, \\\"No items provided\\\");\\n\\n        // Ensure the recipient address is valid\\n        require(recipient != address(0), \\\"Invalid recipient address\\\");\\n\\n        // Ensure the recipient owns all the items\\n        for (uint256 i = 0; i < itemIds.length; i++) {\\n            require(\\n                itemToOwner[itemIds[i]] == recipient,\\n                \\\"Recipient does not own all items\\\"\\n            );\\n        }\\n\\n        uint256 totalPrice = pendingPayments[recipient]; // Retrieve the total payment amount\\n\\n        require(totalPrice > 0, \\\"No pending payment found for the recipient\\\"); // Ensure there is a pending payment\\n\\n        // Create a new receipt with an ID offset by the constant\\n        receiptCounter++;\\n        uint256 receiptId = RECEIPT_ID_START + receiptCounter;\\n        receipts[receiptId] = Receipt(\\n            receiptId,\\n            recipient,\\n            itemIds,\\n            totalPrice,\\n            block.timestamp,\\n            tokenUri\\n        );\\n        userReceipts[recipient].push(receiptId); // Add receipt to the recipient's list\\n\\n        // Mint a new NFT receipt\\n        _mint(recipient, receiptId);\\n        _setTokenURI(receiptId, tokenUri);\\n\\n        // Clear the pending payment for the recipient\\n        pendingPayments[recipient] = 0;\\n    }\\n\\n    // Function to get all item details\\n    // Returns an array of Item structs\\n    function getAllItems() external view returns (Item[] memory) {\\n        Item[] memory allItems = new Item[](itemCounter);\\n        for (uint256 i = 1; i <= itemCounter; i++) {\\n            allItems[i - 1] = items[i];\\n        }\\n        return allItems;\\n    }\\n\\n    // Function to get all receipt IDs for a specific user\\n    function getUserReceipts(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return userReceipts[user];\\n    }\\n\\n    // Function to get the details of a specific receipt by its ID\\n    function getReceiptDetails(\\n        uint256 receiptId\\n    ) external view returns (Receipt memory) {\\n        return receipts[receiptId];\\n    }\\n\\n    // Function to allow the contract owner to withdraw the contract balance\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance; // Get the balance of the contract\\n        require(balance > 0, \\\"No funds to withdraw\\\"); // Ensure there are funds to withdraw\\n        payable(owner()).transfer(balance); // Transfer the balance to the owner\\n    }\\n}\\n\",\"keccak256\":\"0x8880d158e9e732e8be4ac1d597e0f456dab6b670e3f06ae17982db32383e2bd9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50336040518060400160405280600d81526020017f4865616c74684974656d4e4654000000000000000000000000000000000000008152506040518060400160405280600581526020017f48494e4654000000000000000000000000000000000000000000000000000000815250816000908162000090919062000472565b508060019081620000a2919062000472565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200011a5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200011191906200059e565b60405180910390fd5b6200012b816200013260201b60201c565b50620005bb565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200027a57607f821691505b60208210810362000290576200028f62000232565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002bb565b620003068683620002bb565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003536200034d62000347846200031e565b62000328565b6200031e565b9050919050565b6000819050919050565b6200036f8362000332565b620003876200037e826200035a565b848454620002c8565b825550505050565b600090565b6200039e6200038f565b620003ab81848462000364565b505050565b5b81811015620003d357620003c760008262000394565b600181019050620003b1565b5050565b601f8211156200042257620003ec8162000296565b620003f784620002ab565b8101602085101562000407578190505b6200041f6200041685620002ab565b830182620003b0565b50505b505050565b600082821c905092915050565b6000620004476000198460080262000427565b1980831691505092915050565b600062000462838362000434565b9150826002028217905092915050565b6200047d82620001f8565b67ffffffffffffffff81111562000499576200049862000203565b5b620004a5825462000261565b620004b2828285620003d7565b600060209050601f831160018114620004ea5760008415620004d5578287015190505b620004e1858262000454565b86555062000551565b601f198416620004fa8662000296565b60005b828110156200052457848901518255600182019150602085019450602081019050620004fd565b8683101562000544578489015162000540601f89168262000434565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005868262000559565b9050919050565b620005988162000579565b82525050565b6000602082019050620005b560008301846200058d565b92915050565b614caf80620005cb6000396000f3fe6080604052600436106101c25760003560e01c806372d7097b116100f7578063ac5c797711610095578063d3ff098e11610064578063d3ff098e146106ad578063e985e9c5146106d6578063f21220ca14610713578063f2fde38b1461073c576101c2565b8063ac5c7977146105c7578063b88d4fde14610604578063bfb231d21461062d578063c87b56dd14610670576101c2565b806395d89b41116100d157806395d89b41146104f95780639e19bb5914610524578063a22cb46514610561578063a843c5fe1461058a576101c2565b806372d7097b146104685780638da5cb5b146104a557806394dc3ae9146104d0576101c2565b80632a9f5ec3116101645780634ba1d6aa1161013e5780634ba1d6aa146103ac5780636352211e146103d757806370a0823114610414578063715018a614610451576101c2565b80632a9f5ec31461033c5780633ccfd60b1461036c57806342842e0e14610383576101c2565b8063095ea7b3116101a0578063095ea7b31461026c5780630f7ee1ec146102955780631a4d96cd146102d657806323b872dd14610313576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906134b0565b610765565b6040516101fb91906134f8565b60405180910390f35b34801561021057600080fd5b506102196107c6565b60405161022691906135a3565b60405180910390f35b34801561023b57600080fd5b50610256600480360381019061025191906135fb565b610858565b6040516102639190613669565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e91906136b0565b610874565b005b3480156102a157600080fd5b506102bc60048036038101906102b791906135fb565b61088a565b6040516102cd9594939291906136ff565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f891906135fb565b610968565b60405161030a9190613669565b60405180910390f35b34801561031f57600080fd5b5061033a60048036038101906103359190613759565b61099b565b005b610356600480360381019061035191906138f4565b610a9d565b60405161036391906134f8565b60405180910390f35b34801561037857600080fd5b50610381610e18565b005b34801561038f57600080fd5b506103aa60048036038101906103a59190613759565b610eb9565b005b3480156103b857600080fd5b506103c1610ed9565b6040516103ce9190613b10565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f991906135fb565b611296565b60405161040b9190613669565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190613b32565b6112a8565b6040516104489190613b5f565b60405180910390f35b34801561045d57600080fd5b50610466611362565b005b34801561047457600080fd5b5061048f600480360381019061048a91906135fb565b611376565b60405161049c9190613cc8565b60405180910390f35b3480156104b157600080fd5b506104ba611501565b6040516104c79190613669565b60405180910390f35b3480156104dc57600080fd5b506104f760048036038101906104f29190613d9f565b61152b565b005b34801561050557600080fd5b5061050e611926565b60405161051b91906135a3565b60405180910390f35b34801561053057600080fd5b5061054b60048036038101906105469190613b32565b6119b8565b6040516105589190613e99565b60405180910390f35b34801561056d57600080fd5b5061058860048036038101906105839190613ee7565b611a4f565b005b34801561059657600080fd5b506105b160048036038101906105ac91906136b0565b611a65565b6040516105be9190613b5f565b60405180910390f35b3480156105d357600080fd5b506105ee60048036038101906105e99190613b32565b611a96565b6040516105fb9190613b5f565b60405180910390f35b34801561061057600080fd5b5061062b60048036038101906106269190613fc8565b611aae565b005b34801561063957600080fd5b50610654600480360381019061064f91906135fb565b611acb565b604051610667979695949392919061404b565b60405180910390f35b34801561067c57600080fd5b50610697600480360381019061069291906135fb565b611db5565b6040516106a491906135a3565b60405180910390f35b3480156106b957600080fd5b506106d460048036038101906106cf91906140dd565b611ec8565b005b3480156106e257600080fd5b506106fd60048036038101906106f891906141f6565b611fde565b60405161070a91906134f8565b60405180910390f35b34801561071f57600080fd5b5061073a60048036038101906107359190614236565b612072565b005b34801561074857600080fd5b50610763600480360381019061075e9190613b32565b612129565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107bf57506107be826121af565b5b9050919050565b6060600080546107d5906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610801906142a5565b801561084e5780601f106108235761010080835404028352916020019161084e565b820191906000526020600020905b81548152906001019060200180831161083157829003601f168201915b5050505050905090565b600061086382612291565b5061086d82612319565b9050919050565b6108868282610881612356565b61235e565b5050565b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050180546108e5906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610911906142a5565b801561095e5780601f106109335761010080835404028352916020019161095e565b820191906000526020600020905b81548152906001019060200180831161094157829003601f168201915b5050505050905085565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a0d5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610a049190613669565b60405180910390fd5b6000610a218383610a1c612356565b612370565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a97578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610a8e939291906142d6565b60405180910390fd5b50505050565b6000806000905060005b8351811015610bb6573373ffffffffffffffffffffffffffffffffffffffff16600d6000868481518110610ade57610add61430d565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b62906143ae565b60405180910390fd5b600a6000858381518110610b8257610b8161430d565b5b602002602001015181526020019081526020016000206002015482610ba791906143fd565b91508080600101915050610aa7565b506005600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610c705760006064600a83610c0f9190614431565b610c1991906144a2565b90508082610c2791906144d3565b91506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b80341015610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90614579565b60405180910390fd5b60005b8351811015610d6457610ceb610cca611501565b33868481518110610cde57610cdd61430d565b5b602002602001015161258a565b33600d6000868481518110610d0357610d0261430d565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050610cb6565b5080600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506611c37937e08000341115610e0e57600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610e0890614599565b91905055505b6001915050919050565b610e206126f7565b600047905060008111610e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f9061462d565b60405180910390fd5b610e70611501565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610eb5573d6000803e3d6000fd5b5050565b610ed483838360405180602001604052806000815250611aae565b505050565b6060600060095467ffffffffffffffff811115610ef957610ef86137b1565b5b604051908082528060200260200182016040528015610f3257816020015b610f1f613351565b815260200190600190039081610f175790505b5090506000600190505b600954811161128e57600a60008281526020019081526020016000206040518060e001604052908160008201548152602001600182018054610f7d906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa9906142a5565b8015610ff65780601f10610fcb57610100808354040283529160200191610ff6565b820191906000526020600020905b815481529060010190602001808311610fd957829003601f168201915b5050505050815260200160028201548152602001600382018054611019906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611045906142a5565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b505050505081526020016004820180546110ab906142a5565b80601f01602080910402602001604051908101604052809291908181526020018280546110d7906142a5565b80156111245780601f106110f957610100808354040283529160200191611124565b820191906000526020600020905b81548152906001019060200180831161110757829003601f168201915b5050505050815260200160058201805461113d906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611169906142a5565b80156111b65780601f1061118b576101008083540402835291602001916111b6565b820191906000526020600020905b81548152906001019060200180831161119957829003601f168201915b505050505081526020016006820180546111cf906142a5565b80601f01602080910402602001604051908101604052809291908181526020018280546111fb906142a5565b80156112485780601f1061121d57610100808354040283529160200191611248565b820191906000526020600020905b81548152906001019060200180831161122b57829003601f168201915b5050505050815250508260018361125f91906144d3565b815181106112705761126f61430d565b5b6020026020010181905250808061128690614599565b915050610f3c565b508091505090565b60006112a182612291565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361131b5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016113129190613669565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61136a6126f7565b611374600061277e565b565b61137e61338e565b600b60008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180548060200260200160405190810160405280929190818152602001828054801561144b57602002820191906000526020600020905b815481526020019060010190808311611437575b505050505081526020016003820154815260200160048201548152602001600582018054611478906142a5565b80601f01602080910402602001604051908101604052809291908181526020018280546114a4906142a5565b80156114f15780601f106114c6576101008083540402835291602001916114f1565b820191906000526020600020905b8154815290600101906020018083116114d457829003601f168201915b5050505050815250509050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115336126f7565b6000825111611577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156e90614699565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90614705565b60405180910390fd5b60005b82518110156116ba578373ffffffffffffffffffffffffffffffffffffffff16600d60008584815181106116205761161f61430d565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a490614771565b60405180910390fd5b80806001019150506115e9565b506000600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173990614803565b60405180910390fd5b6008600081548092919061175590614599565b91905055506000600854620f424061176d91906143fd565b90506040518060c001604052808281526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200183815260200142815260200184815250600b60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906118329291906133da565b50606082015181600301556080820151816004015560a082015181600501908161185c91906149cf565b50905050600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556118d08582612844565b6118da818461293d565b6000600e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b606060018054611935906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611961906142a5565b80156119ae5780601f10611983576101008083540402835291602001916119ae565b820191906000526020600020905b81548152906001019060200180831161199157829003601f168201915b5050505050905090565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611a4357602002820191906000526020600020905b815481526020019060010190808311611a2f575b50505050509050919050565b611a61611a5a612356565b8383612999565b5050565b600c6020528160005260406000208181548110611a8157600080fd5b90600052602060002001600091509150505481565b600f6020528060005260406000206000915090505481565b611ab984848461099b565b611ac584848484612b08565b50505050565b600a602052806000526040600020600091509050806000015490806001018054611af4906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611b20906142a5565b8015611b6d5780601f10611b4257610100808354040283529160200191611b6d565b820191906000526020600020905b815481529060010190602001808311611b5057829003601f168201915b505050505090806002015490806003018054611b88906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611bb4906142a5565b8015611c015780601f10611bd657610100808354040283529160200191611c01565b820191906000526020600020905b815481529060010190602001808311611be457829003601f168201915b505050505090806004018054611c16906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c42906142a5565b8015611c8f5780601f10611c6457610100808354040283529160200191611c8f565b820191906000526020600020905b815481529060010190602001808311611c7257829003601f168201915b505050505090806005018054611ca4906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd0906142a5565b8015611d1d5780601f10611cf257610100808354040283529160200191611d1d565b820191906000526020600020905b815481529060010190602001808311611d0057829003601f168201915b505050505090806006018054611d32906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5e906142a5565b8015611dab5780601f10611d8057610100808354040283529160200191611dab565b820191906000526020600020905b815481529060010190602001808311611d8e57829003601f168201915b5050505050905087565b6060611dc082612291565b506000600660008481526020019081526020016000208054611de1906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0d906142a5565b8015611e5a5780601f10611e2f57610100808354040283529160200191611e5a565b820191906000526020600020905b815481529060010190602001808311611e3d57829003601f168201915b505050505090506000611e6b612cbf565b90506000815103611e80578192505050611ec3565b600082511115611eb5578082604051602001611e9d929190614add565b60405160208183030381529060405292505050611ec3565b611ebe84612cd6565b925050505b919050565b611ed06126f7565b60096000815480929190611ee390614599565b91905055506040518060e00160405280600954815260200187815260200186815260200185815260200184815260200183815260200182815250600a60006009548152602001908152602001600020600082015181600001556020820151816001019081611f5191906149cf565b50604082015181600201556060820151816003019081611f7191906149cf565b506080820151816004019081611f8791906149cf565b5060a0820151816005019081611f9d91906149cf565b5060c0820151816006019081611fb391906149cf565b50905050611fca611fc2611501565b600954612844565b611fd66009548261293d565b505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61207a6126f7565b6000600a600084815260200190815260200160002060000154036120d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ca90614b4d565b60405180910390fd5b80600d600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6121316126f7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121a35760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161219a9190613669565b60405180910390fd5b6121ac8161277e565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061227a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061228a575061228982612d3f565b5b9050919050565b60008061229d83612da9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361231057826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016123079190613b5f565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b61236b8383836001612de6565b505050565b60008061237c84612da9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146123be576123bd818486612fab565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461244f57612400600085600080612de6565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146124d2576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036125fc5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016125f39190613669565b60405180910390fd5b600061260a83836000612370565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361267d57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016126749190613b5f565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146126f1578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016126e8939291906142d6565b60405180910390fd5b50505050565b6126ff612356565b73ffffffffffffffffffffffffffffffffffffffff1661271d611501565b73ffffffffffffffffffffffffffffffffffffffff161461277c57612740612356565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016127739190613669565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036128b65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016128ad9190613669565b60405180910390fd5b60006128c483836000612370565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146129385760006040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161292f9190613669565b60405180910390fd5b505050565b8060066000848152602001908152602001600020908161295d91906149cf565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161298d9190613b5f565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a0a57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401612a019190613669565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612afb91906134f8565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612cb9578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b4c612356565b8685856040518563ffffffff1660e01b8152600401612b6e9493929190614bc2565b6020604051808303816000875af1925050508015612baa57506040513d601f19601f82011682018060405250810190612ba79190614c23565b60015b612c2e573d8060008114612bda576040519150601f19603f3d011682016040523d82523d6000602084013e612bdf565b606091505b506000815103612c2657836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612c1d9190613669565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cb757836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612cae9190613669565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060612ce182612291565b506000612cec612cbf565b90506000815111612d0c5760405180602001604052806000815250612d37565b80612d168461306f565b604051602001612d27929190614add565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080612e1f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612f53576000612e2f84612291565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612e9a57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612ead5750612eab8184611fde565b155b15612eef57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401612ee69190613669565b60405180910390fd5b8115612f5157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612fb683838361313d565b61306a57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361302b57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016130229190613b5f565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401613061929190614c50565b60405180910390fd5b505050565b60606000600161307e846131fe565b01905060008167ffffffffffffffff81111561309d5761309c6137b1565b5b6040519080825280601f01601f1916602001820160405280156130cf5781602001600182028036833780820191505090505b509050600082602001820190505b600115613132578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161312657613125614473565b5b049450600085036130dd575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156131f557508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806131b657506131b58484611fde565b5b806131f457508273ffffffffffffffffffffffffffffffffffffffff166131dc83612319565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061325c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161325257613251614473565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613299576d04ee2d6d415b85acef8100000000838161328f5761328e614473565b5b0492506020810190505b662386f26fc1000083106132c857662386f26fc1000083816132be576132bd614473565b5b0492506010810190505b6305f5e10083106132f1576305f5e10083816132e7576132e6614473565b5b0492506008810190505b612710831061331657612710838161330c5761330b614473565b5b0492506004810190505b60648310613339576064838161332f5761332e614473565b5b0492506002810190505b600a8310613348576001810190505b80915050919050565b6040518060e00160405280600081526020016060815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215613416579160200282015b828111156134155782518255916020019190600101906133fa565b5b5090506134239190613427565b5090565b5b80821115613440576000816000905550600101613428565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61348d81613458565b811461349857600080fd5b50565b6000813590506134aa81613484565b92915050565b6000602082840312156134c6576134c561344e565b5b60006134d48482850161349b565b91505092915050565b60008115159050919050565b6134f2816134dd565b82525050565b600060208201905061350d60008301846134e9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561354d578082015181840152602081019050613532565b60008484015250505050565b6000601f19601f8301169050919050565b600061357582613513565b61357f818561351e565b935061358f81856020860161352f565b61359881613559565b840191505092915050565b600060208201905081810360008301526135bd818461356a565b905092915050565b6000819050919050565b6135d8816135c5565b81146135e357600080fd5b50565b6000813590506135f5816135cf565b92915050565b6000602082840312156136115761361061344e565b5b600061361f848285016135e6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061365382613628565b9050919050565b61366381613648565b82525050565b600060208201905061367e600083018461365a565b92915050565b61368d81613648565b811461369857600080fd5b50565b6000813590506136aa81613684565b92915050565b600080604083850312156136c7576136c661344e565b5b60006136d58582860161369b565b92505060206136e6858286016135e6565b9150509250929050565b6136f9816135c5565b82525050565b600060a08201905061371460008301886136f0565b613721602083018761365a565b61372e60408301866136f0565b61373b60608301856136f0565b818103608083015261374d818461356a565b90509695505050505050565b6000806000606084860312156137725761377161344e565b5b60006137808682870161369b565b93505060206137918682870161369b565b92505060406137a2868287016135e6565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6137e982613559565b810181811067ffffffffffffffff82111715613808576138076137b1565b5b80604052505050565b600061381b613444565b905061382782826137e0565b919050565b600067ffffffffffffffff821115613847576138466137b1565b5b602082029050602081019050919050565b600080fd5b600061387061386b8461382c565b613811565b9050808382526020820190506020840283018581111561389357613892613858565b5b835b818110156138bc57806138a888826135e6565b845260208401935050602081019050613895565b5050509392505050565b600082601f8301126138db576138da6137ac565b5b81356138eb84826020860161385d565b91505092915050565b60006020828403121561390a5761390961344e565b5b600082013567ffffffffffffffff81111561392857613927613453565b5b613934848285016138c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613972816135c5565b82525050565b600082825260208201905092915050565b600061399482613513565b61399e8185613978565b93506139ae81856020860161352f565b6139b781613559565b840191505092915050565b600060e0830160008301516139da6000860182613969565b50602083015184820360208601526139f28282613989565b9150506040830151613a076040860182613969565b5060608301518482036060860152613a1f8282613989565b91505060808301518482036080860152613a398282613989565b91505060a083015184820360a0860152613a538282613989565b91505060c083015184820360c0860152613a6d8282613989565b9150508091505092915050565b6000613a8683836139c2565b905092915050565b6000602082019050919050565b6000613aa68261393d565b613ab08185613948565b935083602082028501613ac285613959565b8060005b85811015613afe5784840389528151613adf8582613a7a565b9450613aea83613a8e565b925060208a01995050600181019050613ac6565b50829750879550505050505092915050565b60006020820190508181036000830152613b2a8184613a9b565b905092915050565b600060208284031215613b4857613b4761344e565b5b6000613b568482850161369b565b91505092915050565b6000602082019050613b7460008301846136f0565b92915050565b613b8381613648565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613bc18383613969565b60208301905092915050565b6000602082019050919050565b6000613be582613b89565b613bef8185613b94565b9350613bfa83613ba5565b8060005b83811015613c2b578151613c128882613bb5565b9750613c1d83613bcd565b925050600181019050613bfe565b5085935050505092915050565b600060c083016000830151613c506000860182613969565b506020830151613c636020860182613b7a565b5060408301518482036040860152613c7b8282613bda565b9150506060830151613c906060860182613969565b506080830151613ca36080860182613969565b5060a083015184820360a0860152613cbb8282613989565b9150508091505092915050565b60006020820190508181036000830152613ce28184613c38565b905092915050565b600080fd5b600067ffffffffffffffff821115613d0a57613d096137b1565b5b613d1382613559565b9050602081019050919050565b82818337600083830152505050565b6000613d42613d3d84613cef565b613811565b905082815260208101848484011115613d5e57613d5d613cea565b5b613d69848285613d20565b509392505050565b600082601f830112613d8657613d856137ac565b5b8135613d96848260208601613d2f565b91505092915050565b600080600060608486031215613db857613db761344e565b5b6000613dc68682870161369b565b935050602084013567ffffffffffffffff811115613de757613de6613453565b5b613df3868287016138c6565b925050604084013567ffffffffffffffff811115613e1457613e13613453565b5b613e2086828701613d71565b9150509250925092565b600082825260208201905092915050565b6000613e4682613b89565b613e508185613e2a565b9350613e5b83613ba5565b8060005b83811015613e8c578151613e738882613bb5565b9750613e7e83613bcd565b925050600181019050613e5f565b5085935050505092915050565b60006020820190508181036000830152613eb38184613e3b565b905092915050565b613ec4816134dd565b8114613ecf57600080fd5b50565b600081359050613ee181613ebb565b92915050565b60008060408385031215613efe57613efd61344e565b5b6000613f0c8582860161369b565b9250506020613f1d85828601613ed2565b9150509250929050565b600067ffffffffffffffff821115613f4257613f416137b1565b5b613f4b82613559565b9050602081019050919050565b6000613f6b613f6684613f27565b613811565b905082815260208101848484011115613f8757613f86613cea565b5b613f92848285613d20565b509392505050565b600082601f830112613faf57613fae6137ac565b5b8135613fbf848260208601613f58565b91505092915050565b60008060008060808587031215613fe257613fe161344e565b5b6000613ff08782880161369b565b94505060206140018782880161369b565b9350506040614012878288016135e6565b925050606085013567ffffffffffffffff81111561403357614032613453565b5b61403f87828801613f9a565b91505092959194509250565b600060e082019050614060600083018a6136f0565b8181036020830152614072818961356a565b905061408160408301886136f0565b8181036060830152614093818761356a565b905081810360808301526140a7818661356a565b905081810360a08301526140bb818561356a565b905081810360c08301526140cf818461356a565b905098975050505050505050565b60008060008060008060c087890312156140fa576140f961344e565b5b600087013567ffffffffffffffff81111561411857614117613453565b5b61412489828a01613d71565b965050602061413589828a016135e6565b955050604087013567ffffffffffffffff81111561415657614155613453565b5b61416289828a01613d71565b945050606087013567ffffffffffffffff81111561418357614182613453565b5b61418f89828a01613d71565b935050608087013567ffffffffffffffff8111156141b0576141af613453565b5b6141bc89828a01613d71565b92505060a087013567ffffffffffffffff8111156141dd576141dc613453565b5b6141e989828a01613d71565b9150509295509295509295565b6000806040838503121561420d5761420c61344e565b5b600061421b8582860161369b565b925050602061422c8582860161369b565b9150509250929050565b6000806040838503121561424d5761424c61344e565b5b600061425b858286016135e6565b925050602061426c8582860161369b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142bd57607f821691505b6020821081036142d0576142cf614276565b5b50919050565b60006060820190506142eb600083018661365a565b6142f860208301856136f0565b614305604083018461365a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5472616e73616374696f6e2073656e64657220646f6573206e6f74206f776e2060008201527f7468657365206974656d73000000000000000000000000000000000000000000602082015250565b6000614398602b8361351e565b91506143a38261433c565b604082019050919050565b600060208201905081810360008301526143c78161438b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614408826135c5565b9150614413836135c5565b925082820190508082111561442b5761442a6143ce565b5b92915050565b600061443c826135c5565b9150614447836135c5565b9250828202614455816135c5565b9150828204841483151761446c5761446b6143ce565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006144ad826135c5565b91506144b8836135c5565b9250826144c8576144c7614473565b5b828204905092915050565b60006144de826135c5565b91506144e9836135c5565b9250828203905081811115614501576145006143ce565b5b92915050565b7f496e73756666696369656e742066756e647320746f20636f6d706c657465207460008201527f6865207075726368617365000000000000000000000000000000000000000000602082015250565b6000614563602b8361351e565b915061456e82614507565b604082019050919050565b6000602082019050818103600083015261459281614556565b9050919050565b60006145a4826135c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145d6576145d56143ce565b5b600182019050919050565b7f4e6f2066756e647320746f207769746864726177000000000000000000000000600082015250565b600061461760148361351e565b9150614622826145e1565b602082019050919050565b600060208201905081810360008301526146468161460a565b9050919050565b7f4e6f206974656d732070726f7669646564000000000000000000000000000000600082015250565b600061468360118361351e565b915061468e8261464d565b602082019050919050565b600060208201905081810360008301526146b281614676565b9050919050565b7f496e76616c696420726563697069656e74206164647265737300000000000000600082015250565b60006146ef60198361351e565b91506146fa826146b9565b602082019050919050565b6000602082019050818103600083015261471e816146e2565b9050919050565b7f526563697069656e7420646f6573206e6f74206f776e20616c6c206974656d73600082015250565b600061475b60208361351e565b915061476682614725565b602082019050919050565b6000602082019050818103600083015261478a8161474e565b9050919050565b7f4e6f2070656e64696e67207061796d656e7420666f756e6420666f722074686560008201527f20726563697069656e7400000000000000000000000000000000000000000000602082015250565b60006147ed602a8361351e565b91506147f882614791565b604082019050919050565b6000602082019050818103600083015261481c816147e0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614848565b61488f8683614848565b95508019841693508086168417925050509392505050565b6000819050919050565b60006148cc6148c76148c2846135c5565b6148a7565b6135c5565b9050919050565b6000819050919050565b6148e6836148b1565b6148fa6148f2826148d3565b848454614855565b825550505050565b600090565b61490f614902565b61491a8184846148dd565b505050565b5b8181101561493e57614933600082614907565b600181019050614920565b5050565b601f8211156149835761495481614823565b61495d84614838565b8101602085101561496c578190505b61498061497885614838565b83018261491f565b50505b505050565b600082821c905092915050565b60006149a660001984600802614988565b1980831691505092915050565b60006149bf8383614995565b9150826002028217905092915050565b6149d882613513565b67ffffffffffffffff8111156149f1576149f06137b1565b5b6149fb82546142a5565b614a06828285614942565b600060209050601f831160018114614a395760008415614a27578287015190505b614a3185826149b3565b865550614a99565b601f198416614a4786614823565b60005b82811015614a6f57848901518255600182019150602085019450602081019050614a4a565b86831015614a8c5784890151614a88601f891682614995565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000614ab782613513565b614ac18185614aa1565b9350614ad181856020860161352f565b80840191505092915050565b6000614ae98285614aac565b9150614af58284614aac565b91508190509392505050565b7f4974656d20646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000614b3760138361351e565b9150614b4282614b01565b602082019050919050565b60006020820190508181036000830152614b6681614b2a565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614b9482614b6d565b614b9e8185614b78565b9350614bae81856020860161352f565b614bb781613559565b840191505092915050565b6000608082019050614bd7600083018761365a565b614be4602083018661365a565b614bf160408301856136f0565b8181036060830152614c038184614b89565b905095945050505050565b600081519050614c1d81613484565b92915050565b600060208284031215614c3957614c3861344e565b5b6000614c4784828501614c0e565b91505092915050565b6000604082019050614c65600083018561365a565b614c7260208301846136f0565b939250505056fea2646970667358221220af5f00f7f99d7edff72092078fc8dd9b49b08ce2b3b8e5ba23c8470352d2d81764736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806372d7097b116100f7578063ac5c797711610095578063d3ff098e11610064578063d3ff098e146106ad578063e985e9c5146106d6578063f21220ca14610713578063f2fde38b1461073c576101c2565b8063ac5c7977146105c7578063b88d4fde14610604578063bfb231d21461062d578063c87b56dd14610670576101c2565b806395d89b41116100d157806395d89b41146104f95780639e19bb5914610524578063a22cb46514610561578063a843c5fe1461058a576101c2565b806372d7097b146104685780638da5cb5b146104a557806394dc3ae9146104d0576101c2565b80632a9f5ec3116101645780634ba1d6aa1161013e5780634ba1d6aa146103ac5780636352211e146103d757806370a0823114610414578063715018a614610451576101c2565b80632a9f5ec31461033c5780633ccfd60b1461036c57806342842e0e14610383576101c2565b8063095ea7b3116101a0578063095ea7b31461026c5780630f7ee1ec146102955780631a4d96cd146102d657806323b872dd14610313576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906134b0565b610765565b6040516101fb91906134f8565b60405180910390f35b34801561021057600080fd5b506102196107c6565b60405161022691906135a3565b60405180910390f35b34801561023b57600080fd5b50610256600480360381019061025191906135fb565b610858565b6040516102639190613669565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e91906136b0565b610874565b005b3480156102a157600080fd5b506102bc60048036038101906102b791906135fb565b61088a565b6040516102cd9594939291906136ff565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f891906135fb565b610968565b60405161030a9190613669565b60405180910390f35b34801561031f57600080fd5b5061033a60048036038101906103359190613759565b61099b565b005b610356600480360381019061035191906138f4565b610a9d565b60405161036391906134f8565b60405180910390f35b34801561037857600080fd5b50610381610e18565b005b34801561038f57600080fd5b506103aa60048036038101906103a59190613759565b610eb9565b005b3480156103b857600080fd5b506103c1610ed9565b6040516103ce9190613b10565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f991906135fb565b611296565b60405161040b9190613669565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190613b32565b6112a8565b6040516104489190613b5f565b60405180910390f35b34801561045d57600080fd5b50610466611362565b005b34801561047457600080fd5b5061048f600480360381019061048a91906135fb565b611376565b60405161049c9190613cc8565b60405180910390f35b3480156104b157600080fd5b506104ba611501565b6040516104c79190613669565b60405180910390f35b3480156104dc57600080fd5b506104f760048036038101906104f29190613d9f565b61152b565b005b34801561050557600080fd5b5061050e611926565b60405161051b91906135a3565b60405180910390f35b34801561053057600080fd5b5061054b60048036038101906105469190613b32565b6119b8565b6040516105589190613e99565b60405180910390f35b34801561056d57600080fd5b5061058860048036038101906105839190613ee7565b611a4f565b005b34801561059657600080fd5b506105b160048036038101906105ac91906136b0565b611a65565b6040516105be9190613b5f565b60405180910390f35b3480156105d357600080fd5b506105ee60048036038101906105e99190613b32565b611a96565b6040516105fb9190613b5f565b60405180910390f35b34801561061057600080fd5b5061062b60048036038101906106269190613fc8565b611aae565b005b34801561063957600080fd5b50610654600480360381019061064f91906135fb565b611acb565b604051610667979695949392919061404b565b60405180910390f35b34801561067c57600080fd5b50610697600480360381019061069291906135fb565b611db5565b6040516106a491906135a3565b60405180910390f35b3480156106b957600080fd5b506106d460048036038101906106cf91906140dd565b611ec8565b005b3480156106e257600080fd5b506106fd60048036038101906106f891906141f6565b611fde565b60405161070a91906134f8565b60405180910390f35b34801561071f57600080fd5b5061073a60048036038101906107359190614236565b612072565b005b34801561074857600080fd5b50610763600480360381019061075e9190613b32565b612129565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107bf57506107be826121af565b5b9050919050565b6060600080546107d5906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610801906142a5565b801561084e5780601f106108235761010080835404028352916020019161084e565b820191906000526020600020905b81548152906001019060200180831161083157829003601f168201915b5050505050905090565b600061086382612291565b5061086d82612319565b9050919050565b6108868282610881612356565b61235e565b5050565b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050180546108e5906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610911906142a5565b801561095e5780601f106109335761010080835404028352916020019161095e565b820191906000526020600020905b81548152906001019060200180831161094157829003601f168201915b5050505050905085565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a0d5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610a049190613669565b60405180910390fd5b6000610a218383610a1c612356565b612370565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a97578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610a8e939291906142d6565b60405180910390fd5b50505050565b6000806000905060005b8351811015610bb6573373ffffffffffffffffffffffffffffffffffffffff16600d6000868481518110610ade57610add61430d565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b62906143ae565b60405180910390fd5b600a6000858381518110610b8257610b8161430d565b5b602002602001015181526020019081526020016000206002015482610ba791906143fd565b91508080600101915050610aa7565b506005600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610c705760006064600a83610c0f9190614431565b610c1991906144a2565b90508082610c2791906144d3565b91506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b80341015610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90614579565b60405180910390fd5b60005b8351811015610d6457610ceb610cca611501565b33868481518110610cde57610cdd61430d565b5b602002602001015161258a565b33600d6000868481518110610d0357610d0261430d565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050610cb6565b5080600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506611c37937e08000341115610e0e57600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610e0890614599565b91905055505b6001915050919050565b610e206126f7565b600047905060008111610e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f9061462d565b60405180910390fd5b610e70611501565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610eb5573d6000803e3d6000fd5b5050565b610ed483838360405180602001604052806000815250611aae565b505050565b6060600060095467ffffffffffffffff811115610ef957610ef86137b1565b5b604051908082528060200260200182016040528015610f3257816020015b610f1f613351565b815260200190600190039081610f175790505b5090506000600190505b600954811161128e57600a60008281526020019081526020016000206040518060e001604052908160008201548152602001600182018054610f7d906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa9906142a5565b8015610ff65780601f10610fcb57610100808354040283529160200191610ff6565b820191906000526020600020905b815481529060010190602001808311610fd957829003601f168201915b5050505050815260200160028201548152602001600382018054611019906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611045906142a5565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b505050505081526020016004820180546110ab906142a5565b80601f01602080910402602001604051908101604052809291908181526020018280546110d7906142a5565b80156111245780601f106110f957610100808354040283529160200191611124565b820191906000526020600020905b81548152906001019060200180831161110757829003601f168201915b5050505050815260200160058201805461113d906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611169906142a5565b80156111b65780601f1061118b576101008083540402835291602001916111b6565b820191906000526020600020905b81548152906001019060200180831161119957829003601f168201915b505050505081526020016006820180546111cf906142a5565b80601f01602080910402602001604051908101604052809291908181526020018280546111fb906142a5565b80156112485780601f1061121d57610100808354040283529160200191611248565b820191906000526020600020905b81548152906001019060200180831161122b57829003601f168201915b5050505050815250508260018361125f91906144d3565b815181106112705761126f61430d565b5b6020026020010181905250808061128690614599565b915050610f3c565b508091505090565b60006112a182612291565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361131b5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016113129190613669565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61136a6126f7565b611374600061277e565b565b61137e61338e565b600b60008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180548060200260200160405190810160405280929190818152602001828054801561144b57602002820191906000526020600020905b815481526020019060010190808311611437575b505050505081526020016003820154815260200160048201548152602001600582018054611478906142a5565b80601f01602080910402602001604051908101604052809291908181526020018280546114a4906142a5565b80156114f15780601f106114c6576101008083540402835291602001916114f1565b820191906000526020600020905b8154815290600101906020018083116114d457829003601f168201915b5050505050815250509050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115336126f7565b6000825111611577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156e90614699565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90614705565b60405180910390fd5b60005b82518110156116ba578373ffffffffffffffffffffffffffffffffffffffff16600d60008584815181106116205761161f61430d565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a490614771565b60405180910390fd5b80806001019150506115e9565b506000600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173990614803565b60405180910390fd5b6008600081548092919061175590614599565b91905055506000600854620f424061176d91906143fd565b90506040518060c001604052808281526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200183815260200142815260200184815250600b60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906118329291906133da565b50606082015181600301556080820151816004015560a082015181600501908161185c91906149cf565b50905050600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556118d08582612844565b6118da818461293d565b6000600e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b606060018054611935906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611961906142a5565b80156119ae5780601f10611983576101008083540402835291602001916119ae565b820191906000526020600020905b81548152906001019060200180831161199157829003601f168201915b5050505050905090565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611a4357602002820191906000526020600020905b815481526020019060010190808311611a2f575b50505050509050919050565b611a61611a5a612356565b8383612999565b5050565b600c6020528160005260406000208181548110611a8157600080fd5b90600052602060002001600091509150505481565b600f6020528060005260406000206000915090505481565b611ab984848461099b565b611ac584848484612b08565b50505050565b600a602052806000526040600020600091509050806000015490806001018054611af4906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611b20906142a5565b8015611b6d5780601f10611b4257610100808354040283529160200191611b6d565b820191906000526020600020905b815481529060010190602001808311611b5057829003601f168201915b505050505090806002015490806003018054611b88906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611bb4906142a5565b8015611c015780601f10611bd657610100808354040283529160200191611c01565b820191906000526020600020905b815481529060010190602001808311611be457829003601f168201915b505050505090806004018054611c16906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c42906142a5565b8015611c8f5780601f10611c6457610100808354040283529160200191611c8f565b820191906000526020600020905b815481529060010190602001808311611c7257829003601f168201915b505050505090806005018054611ca4906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd0906142a5565b8015611d1d5780601f10611cf257610100808354040283529160200191611d1d565b820191906000526020600020905b815481529060010190602001808311611d0057829003601f168201915b505050505090806006018054611d32906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5e906142a5565b8015611dab5780601f10611d8057610100808354040283529160200191611dab565b820191906000526020600020905b815481529060010190602001808311611d8e57829003601f168201915b5050505050905087565b6060611dc082612291565b506000600660008481526020019081526020016000208054611de1906142a5565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0d906142a5565b8015611e5a5780601f10611e2f57610100808354040283529160200191611e5a565b820191906000526020600020905b815481529060010190602001808311611e3d57829003601f168201915b505050505090506000611e6b612cbf565b90506000815103611e80578192505050611ec3565b600082511115611eb5578082604051602001611e9d929190614add565b60405160208183030381529060405292505050611ec3565b611ebe84612cd6565b925050505b919050565b611ed06126f7565b60096000815480929190611ee390614599565b91905055506040518060e00160405280600954815260200187815260200186815260200185815260200184815260200183815260200182815250600a60006009548152602001908152602001600020600082015181600001556020820151816001019081611f5191906149cf565b50604082015181600201556060820151816003019081611f7191906149cf565b506080820151816004019081611f8791906149cf565b5060a0820151816005019081611f9d91906149cf565b5060c0820151816006019081611fb391906149cf565b50905050611fca611fc2611501565b600954612844565b611fd66009548261293d565b505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61207a6126f7565b6000600a600084815260200190815260200160002060000154036120d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ca90614b4d565b60405180910390fd5b80600d600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6121316126f7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121a35760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161219a9190613669565b60405180910390fd5b6121ac8161277e565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061227a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061228a575061228982612d3f565b5b9050919050565b60008061229d83612da9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361231057826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016123079190613b5f565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b61236b8383836001612de6565b505050565b60008061237c84612da9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146123be576123bd818486612fab565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461244f57612400600085600080612de6565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146124d2576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036125fc5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016125f39190613669565b60405180910390fd5b600061260a83836000612370565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361267d57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016126749190613b5f565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146126f1578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016126e8939291906142d6565b60405180910390fd5b50505050565b6126ff612356565b73ffffffffffffffffffffffffffffffffffffffff1661271d611501565b73ffffffffffffffffffffffffffffffffffffffff161461277c57612740612356565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016127739190613669565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036128b65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016128ad9190613669565b60405180910390fd5b60006128c483836000612370565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146129385760006040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161292f9190613669565b60405180910390fd5b505050565b8060066000848152602001908152602001600020908161295d91906149cf565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161298d9190613b5f565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a0a57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401612a019190613669565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612afb91906134f8565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612cb9578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b4c612356565b8685856040518563ffffffff1660e01b8152600401612b6e9493929190614bc2565b6020604051808303816000875af1925050508015612baa57506040513d601f19601f82011682018060405250810190612ba79190614c23565b60015b612c2e573d8060008114612bda576040519150601f19603f3d011682016040523d82523d6000602084013e612bdf565b606091505b506000815103612c2657836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612c1d9190613669565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cb757836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612cae9190613669565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060612ce182612291565b506000612cec612cbf565b90506000815111612d0c5760405180602001604052806000815250612d37565b80612d168461306f565b604051602001612d27929190614add565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080612e1f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612f53576000612e2f84612291565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612e9a57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612ead5750612eab8184611fde565b155b15612eef57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401612ee69190613669565b60405180910390fd5b8115612f5157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612fb683838361313d565b61306a57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361302b57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016130229190613b5f565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401613061929190614c50565b60405180910390fd5b505050565b60606000600161307e846131fe565b01905060008167ffffffffffffffff81111561309d5761309c6137b1565b5b6040519080825280601f01601f1916602001820160405280156130cf5781602001600182028036833780820191505090505b509050600082602001820190505b600115613132578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161312657613125614473565b5b049450600085036130dd575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156131f557508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806131b657506131b58484611fde565b5b806131f457508273ffffffffffffffffffffffffffffffffffffffff166131dc83612319565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061325c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161325257613251614473565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613299576d04ee2d6d415b85acef8100000000838161328f5761328e614473565b5b0492506020810190505b662386f26fc1000083106132c857662386f26fc1000083816132be576132bd614473565b5b0492506010810190505b6305f5e10083106132f1576305f5e10083816132e7576132e6614473565b5b0492506008810190505b612710831061331657612710838161330c5761330b614473565b5b0492506004810190505b60648310613339576064838161332f5761332e614473565b5b0492506002810190505b600a8310613348576001810190505b80915050919050565b6040518060e00160405280600081526020016060815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215613416579160200282015b828111156134155782518255916020019190600101906133fa565b5b5090506134239190613427565b5090565b5b80821115613440576000816000905550600101613428565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61348d81613458565b811461349857600080fd5b50565b6000813590506134aa81613484565b92915050565b6000602082840312156134c6576134c561344e565b5b60006134d48482850161349b565b91505092915050565b60008115159050919050565b6134f2816134dd565b82525050565b600060208201905061350d60008301846134e9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561354d578082015181840152602081019050613532565b60008484015250505050565b6000601f19601f8301169050919050565b600061357582613513565b61357f818561351e565b935061358f81856020860161352f565b61359881613559565b840191505092915050565b600060208201905081810360008301526135bd818461356a565b905092915050565b6000819050919050565b6135d8816135c5565b81146135e357600080fd5b50565b6000813590506135f5816135cf565b92915050565b6000602082840312156136115761361061344e565b5b600061361f848285016135e6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061365382613628565b9050919050565b61366381613648565b82525050565b600060208201905061367e600083018461365a565b92915050565b61368d81613648565b811461369857600080fd5b50565b6000813590506136aa81613684565b92915050565b600080604083850312156136c7576136c661344e565b5b60006136d58582860161369b565b92505060206136e6858286016135e6565b9150509250929050565b6136f9816135c5565b82525050565b600060a08201905061371460008301886136f0565b613721602083018761365a565b61372e60408301866136f0565b61373b60608301856136f0565b818103608083015261374d818461356a565b90509695505050505050565b6000806000606084860312156137725761377161344e565b5b60006137808682870161369b565b93505060206137918682870161369b565b92505060406137a2868287016135e6565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6137e982613559565b810181811067ffffffffffffffff82111715613808576138076137b1565b5b80604052505050565b600061381b613444565b905061382782826137e0565b919050565b600067ffffffffffffffff821115613847576138466137b1565b5b602082029050602081019050919050565b600080fd5b600061387061386b8461382c565b613811565b9050808382526020820190506020840283018581111561389357613892613858565b5b835b818110156138bc57806138a888826135e6565b845260208401935050602081019050613895565b5050509392505050565b600082601f8301126138db576138da6137ac565b5b81356138eb84826020860161385d565b91505092915050565b60006020828403121561390a5761390961344e565b5b600082013567ffffffffffffffff81111561392857613927613453565b5b613934848285016138c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613972816135c5565b82525050565b600082825260208201905092915050565b600061399482613513565b61399e8185613978565b93506139ae81856020860161352f565b6139b781613559565b840191505092915050565b600060e0830160008301516139da6000860182613969565b50602083015184820360208601526139f28282613989565b9150506040830151613a076040860182613969565b5060608301518482036060860152613a1f8282613989565b91505060808301518482036080860152613a398282613989565b91505060a083015184820360a0860152613a538282613989565b91505060c083015184820360c0860152613a6d8282613989565b9150508091505092915050565b6000613a8683836139c2565b905092915050565b6000602082019050919050565b6000613aa68261393d565b613ab08185613948565b935083602082028501613ac285613959565b8060005b85811015613afe5784840389528151613adf8582613a7a565b9450613aea83613a8e565b925060208a01995050600181019050613ac6565b50829750879550505050505092915050565b60006020820190508181036000830152613b2a8184613a9b565b905092915050565b600060208284031215613b4857613b4761344e565b5b6000613b568482850161369b565b91505092915050565b6000602082019050613b7460008301846136f0565b92915050565b613b8381613648565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613bc18383613969565b60208301905092915050565b6000602082019050919050565b6000613be582613b89565b613bef8185613b94565b9350613bfa83613ba5565b8060005b83811015613c2b578151613c128882613bb5565b9750613c1d83613bcd565b925050600181019050613bfe565b5085935050505092915050565b600060c083016000830151613c506000860182613969565b506020830151613c636020860182613b7a565b5060408301518482036040860152613c7b8282613bda565b9150506060830151613c906060860182613969565b506080830151613ca36080860182613969565b5060a083015184820360a0860152613cbb8282613989565b9150508091505092915050565b60006020820190508181036000830152613ce28184613c38565b905092915050565b600080fd5b600067ffffffffffffffff821115613d0a57613d096137b1565b5b613d1382613559565b9050602081019050919050565b82818337600083830152505050565b6000613d42613d3d84613cef565b613811565b905082815260208101848484011115613d5e57613d5d613cea565b5b613d69848285613d20565b509392505050565b600082601f830112613d8657613d856137ac565b5b8135613d96848260208601613d2f565b91505092915050565b600080600060608486031215613db857613db761344e565b5b6000613dc68682870161369b565b935050602084013567ffffffffffffffff811115613de757613de6613453565b5b613df3868287016138c6565b925050604084013567ffffffffffffffff811115613e1457613e13613453565b5b613e2086828701613d71565b9150509250925092565b600082825260208201905092915050565b6000613e4682613b89565b613e508185613e2a565b9350613e5b83613ba5565b8060005b83811015613e8c578151613e738882613bb5565b9750613e7e83613bcd565b925050600181019050613e5f565b5085935050505092915050565b60006020820190508181036000830152613eb38184613e3b565b905092915050565b613ec4816134dd565b8114613ecf57600080fd5b50565b600081359050613ee181613ebb565b92915050565b60008060408385031215613efe57613efd61344e565b5b6000613f0c8582860161369b565b9250506020613f1d85828601613ed2565b9150509250929050565b600067ffffffffffffffff821115613f4257613f416137b1565b5b613f4b82613559565b9050602081019050919050565b6000613f6b613f6684613f27565b613811565b905082815260208101848484011115613f8757613f86613cea565b5b613f92848285613d20565b509392505050565b600082601f830112613faf57613fae6137ac565b5b8135613fbf848260208601613f58565b91505092915050565b60008060008060808587031215613fe257613fe161344e565b5b6000613ff08782880161369b565b94505060206140018782880161369b565b9350506040614012878288016135e6565b925050606085013567ffffffffffffffff81111561403357614032613453565b5b61403f87828801613f9a565b91505092959194509250565b600060e082019050614060600083018a6136f0565b8181036020830152614072818961356a565b905061408160408301886136f0565b8181036060830152614093818761356a565b905081810360808301526140a7818661356a565b905081810360a08301526140bb818561356a565b905081810360c08301526140cf818461356a565b905098975050505050505050565b60008060008060008060c087890312156140fa576140f961344e565b5b600087013567ffffffffffffffff81111561411857614117613453565b5b61412489828a01613d71565b965050602061413589828a016135e6565b955050604087013567ffffffffffffffff81111561415657614155613453565b5b61416289828a01613d71565b945050606087013567ffffffffffffffff81111561418357614182613453565b5b61418f89828a01613d71565b935050608087013567ffffffffffffffff8111156141b0576141af613453565b5b6141bc89828a01613d71565b92505060a087013567ffffffffffffffff8111156141dd576141dc613453565b5b6141e989828a01613d71565b9150509295509295509295565b6000806040838503121561420d5761420c61344e565b5b600061421b8582860161369b565b925050602061422c8582860161369b565b9150509250929050565b6000806040838503121561424d5761424c61344e565b5b600061425b858286016135e6565b925050602061426c8582860161369b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142bd57607f821691505b6020821081036142d0576142cf614276565b5b50919050565b60006060820190506142eb600083018661365a565b6142f860208301856136f0565b614305604083018461365a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5472616e73616374696f6e2073656e64657220646f6573206e6f74206f776e2060008201527f7468657365206974656d73000000000000000000000000000000000000000000602082015250565b6000614398602b8361351e565b91506143a38261433c565b604082019050919050565b600060208201905081810360008301526143c78161438b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614408826135c5565b9150614413836135c5565b925082820190508082111561442b5761442a6143ce565b5b92915050565b600061443c826135c5565b9150614447836135c5565b9250828202614455816135c5565b9150828204841483151761446c5761446b6143ce565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006144ad826135c5565b91506144b8836135c5565b9250826144c8576144c7614473565b5b828204905092915050565b60006144de826135c5565b91506144e9836135c5565b9250828203905081811115614501576145006143ce565b5b92915050565b7f496e73756666696369656e742066756e647320746f20636f6d706c657465207460008201527f6865207075726368617365000000000000000000000000000000000000000000602082015250565b6000614563602b8361351e565b915061456e82614507565b604082019050919050565b6000602082019050818103600083015261459281614556565b9050919050565b60006145a4826135c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145d6576145d56143ce565b5b600182019050919050565b7f4e6f2066756e647320746f207769746864726177000000000000000000000000600082015250565b600061461760148361351e565b9150614622826145e1565b602082019050919050565b600060208201905081810360008301526146468161460a565b9050919050565b7f4e6f206974656d732070726f7669646564000000000000000000000000000000600082015250565b600061468360118361351e565b915061468e8261464d565b602082019050919050565b600060208201905081810360008301526146b281614676565b9050919050565b7f496e76616c696420726563697069656e74206164647265737300000000000000600082015250565b60006146ef60198361351e565b91506146fa826146b9565b602082019050919050565b6000602082019050818103600083015261471e816146e2565b9050919050565b7f526563697069656e7420646f6573206e6f74206f776e20616c6c206974656d73600082015250565b600061475b60208361351e565b915061476682614725565b602082019050919050565b6000602082019050818103600083015261478a8161474e565b9050919050565b7f4e6f2070656e64696e67207061796d656e7420666f756e6420666f722074686560008201527f20726563697069656e7400000000000000000000000000000000000000000000602082015250565b60006147ed602a8361351e565b91506147f882614791565b604082019050919050565b6000602082019050818103600083015261481c816147e0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614848565b61488f8683614848565b95508019841693508086168417925050509392505050565b6000819050919050565b60006148cc6148c76148c2846135c5565b6148a7565b6135c5565b9050919050565b6000819050919050565b6148e6836148b1565b6148fa6148f2826148d3565b848454614855565b825550505050565b600090565b61490f614902565b61491a8184846148dd565b505050565b5b8181101561493e57614933600082614907565b600181019050614920565b5050565b601f8211156149835761495481614823565b61495d84614838565b8101602085101561496c578190505b61498061497885614838565b83018261491f565b50505b505050565b600082821c905092915050565b60006149a660001984600802614988565b1980831691505092915050565b60006149bf8383614995565b9150826002028217905092915050565b6149d882613513565b67ffffffffffffffff8111156149f1576149f06137b1565b5b6149fb82546142a5565b614a06828285614942565b600060209050601f831160018114614a395760008415614a27578287015190505b614a3185826149b3565b865550614a99565b601f198416614a4786614823565b60005b82811015614a6f57848901518255600182019150602085019450602081019050614a4a565b86831015614a8c5784890151614a88601f891682614995565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000614ab782613513565b614ac18185614aa1565b9350614ad181856020860161352f565b80840191505092915050565b6000614ae98285614aac565b9150614af58284614aac565b91508190509392505050565b7f4974656d20646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000614b3760138361351e565b9150614b4282614b01565b602082019050919050565b60006020820190508181036000830152614b6681614b2a565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614b9482614b6d565b614b9e8185614b78565b9350614bae81856020860161352f565b614bb781613559565b840191505092915050565b6000608082019050614bd7600083018761365a565b614be4602083018661365a565b614bf160408301856136f0565b8181036060830152614c038184614b89565b905095945050505050565b600081519050614c1d81613484565b92915050565b600060208284031215614c3957614c3861344e565b5b6000614c4784828501614c0e565b91505092915050565b6000604082019050614c65600083018561365a565b614c7260208301846136f0565b939250505056fea2646970667358221220af5f00f7f99d7edff72092078fc8dd9b49b08ce2b3b8e5ba23c8470352d2d81764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 349,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 351,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 355,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 359,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 363,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 369,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1488,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3133,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "receiptCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3135,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "itemCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3140,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "items",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Item)3117_storage)"
      },
      {
        "astId": 3145,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "receipts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Receipt)3131_storage)"
      },
      {
        "astId": 3150,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "userReceipts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3154,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "itemToOwner",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3158,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "pendingPayments",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3162,
        "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
        "label": "customerTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Item)3117_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HealthItemPurchase.Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)3117_storage"
      },
      "t_mapping(t_uint256,t_struct(Receipt)3131_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HealthItemPurchase.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)3131_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Item)3117_storage": {
        "encoding": "inplace",
        "label": "struct HealthItemPurchase.Item",
        "members": [
          {
            "astId": 3104,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3106,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3108,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3110,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "atcCode",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3112,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "imageUri",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3114,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3116,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "tokenUri",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Receipt)3131_storage": {
        "encoding": "inplace",
        "label": "struct HealthItemPurchase.Receipt",
        "members": [
          {
            "astId": 3119,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "receiptId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3121,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3124,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "itemIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3126,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "totalPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3128,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "purchaseDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3130,
            "contract": "contracts/HealthItemPurchase.sol:HealthItemPurchase",
            "label": "tokenUri",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}