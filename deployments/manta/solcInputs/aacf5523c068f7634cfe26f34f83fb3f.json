{
  "language": "Solidity",
  "sources": {
    "contracts/EthKl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract EthLocker {\r\n    struct Claim {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct Transaction {\r\n        address sender;\r\n        uint256 amount;\r\n        uint256 claimedAmount;\r\n        address[] claimers;\r\n        mapping(address => Claim[]) claims;\r\n    }\r\n\r\n    mapping(bytes32 => Transaction) public transactions;\r\n\r\n    // New mapping to store transaction hashes for each sender\r\n    mapping(address => bytes32[]) public senderTransactions;\r\n\r\n    event EthLocked(\r\n        bytes32 indexed transactionHash,\r\n        address indexed sender,\r\n        uint256 amount\r\n    );\r\n    event EthClaimed(\r\n        bytes32 indexed transactionHash,\r\n        address indexed recipient,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    // Function for the sender to lock ETH and generate a transaction hash\r\n    function lockEth() external payable returns (bytes32) {\r\n        require(msg.value > 0, \"Must send some ETH\");\r\n\r\n        // Create a unique hash for this transaction\r\n        bytes32 transactionHash = keccak256(\r\n            abi.encodePacked(msg.sender, msg.value, block.timestamp)\r\n        );\r\n\r\n        // Store the transaction details\r\n        Transaction storage txn = transactions[transactionHash];\r\n        txn.sender = msg.sender;\r\n        txn.amount = msg.value;\r\n        txn.claimedAmount = 0;\r\n\r\n        // Add the transaction hash to the sender's list\r\n        senderTransactions[msg.sender].push(transactionHash);\r\n\r\n        // Emit event for locked ETH\r\n        emit EthLocked(transactionHash, msg.sender, msg.value);\r\n\r\n        // Return the transaction hash (to be written to the NFC tag)\r\n        return transactionHash;\r\n    }\r\n\r\n    // Function for the recipient to claim ETH by scanning NFC and providing the transaction hash\r\n    function claimEth(\r\n        bytes32 transactionHash,\r\n        uint256 requestedAmount\r\n    ) external {\r\n        Transaction storage txn = transactions[transactionHash];\r\n\r\n        // Ensure the transaction exists\r\n        require(txn.sender != address(0), \"Transaction does not exist\");\r\n        require(\r\n            requestedAmount <= (txn.amount - txn.claimedAmount),\r\n            \"Requested amount exceeds available ETH\"\r\n        );\r\n\r\n        // Update the claimed amount\r\n        txn.claimedAmount += requestedAmount;\r\n\r\n        // Add the claimer to the list if they haven't claimed before\r\n        if (txn.claims[msg.sender].length == 0) {\r\n            txn.claimers.push(msg.sender);\r\n        }\r\n        txn.claims[msg.sender].push(Claim(requestedAmount, block.timestamp));\r\n\r\n        // Transfer ETH to the recipient\r\n        (bool success, ) = msg.sender.call{value: requestedAmount}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n\r\n        // Emit event for claimed ETH\r\n        emit EthClaimed(\r\n            transactionHash,\r\n            msg.sender,\r\n            requestedAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getTransaction(\r\n        bytes32 transactionHash\r\n    ) external view returns (address, uint256, uint256, address[] memory) {\r\n        Transaction storage txn = transactions[transactionHash];\r\n        return (txn.sender, txn.amount, txn.claimedAmount, txn.claimers);\r\n    }\r\n\r\n    function getClaimHistory(\r\n        bytes32 transactionHash,\r\n        address claimer\r\n    ) external view returns (uint256[] memory, uint256[] memory) {\r\n        Transaction storage txn = transactions[transactionHash];\r\n        Claim[] storage claims = txn.claims[claimer];\r\n        uint256[] memory amounts = new uint256[](claims.length);\r\n        uint256[] memory timestamps = new uint256[](claims.length);\r\n\r\n        for (uint i = 0; i < claims.length; i++) {\r\n            amounts[i] = claims[i].amount;\r\n            timestamps[i] = claims[i].timestamp;\r\n        }\r\n\r\n        return (amounts, timestamps);\r\n    }\r\n\r\n    function getLockedEthAmount(\r\n        bytes32 transactionHash\r\n    ) external view returns (uint256) {\r\n        Transaction storage txn = transactions[transactionHash];\r\n        require(txn.sender != address(0), \"Transaction does not exist\");\r\n        return txn.amount - txn.claimedAmount;\r\n    }\r\n\r\n    // New function to get all transaction hashes for a given address\r\n    function getTransactionHashesBySender(\r\n        address sender\r\n    ) external view returns (bytes32[] memory) {\r\n        return senderTransactions[sender];\r\n    }\r\n\r\n    // Fallback function to accept ETH directly\r\n    receive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}