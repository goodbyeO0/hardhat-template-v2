{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/QuadraticFunding.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// This line specifies the license under which the code is released\r\n\r\npragma solidity ^0.8.0;\r\n// This pragma directive tells the compiler to use Solidity version 0.8.0 or higher\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// These import statements bring in OpenZeppelin's Ownable contract\r\n\r\ncontract QuadraticFunding is Ownable {\r\n    // This line declares the QuadraticFunding contract, which inherits from Ownable\r\n\r\n    struct Project {\r\n        address payable owner;\r\n        string name;\r\n        uint256 totalContributions;\r\n        uint256 contributorsCount;\r\n        mapping(address => uint256) contributions;\r\n    }\r\n    // This struct defines the structure for a project in the quadratic funding system\r\n\r\n    mapping(uint256 => Project) public projects;\r\n    // This mapping stores all projects, indexed by their ID\r\n\r\n    uint256 public projectCount;\r\n    // This variable keeps track of the total number of projects\r\n\r\n    uint256 public matchingPool;\r\n    // This variable stores the total amount in the matching pool\r\n\r\n    uint256 public roundEndTime;\r\n    // This variable stores the timestamp when the funding round ends\r\n\r\n    event ProjectCreated(uint256 indexed projectId, string name, address owner);\r\n    event ContributionMade(\r\n        uint256 indexed projectId,\r\n        address contributor,\r\n        uint256 amount\r\n    );\r\n    event MatchingDistributed(uint256 indexed projectId, uint256 amount);\r\n\r\n    // These events are emitted when a project is created, a contribution is made, and matching funds are distributed\r\n\r\n    constructor(\r\n        address initialOwner,\r\n        uint256 _roundDuration\r\n    ) Ownable(initialOwner) {\r\n        roundEndTime = block.timestamp + _roundDuration;\r\n    }\r\n\r\n    // The constructor initializes the contract with an initial owner and sets the round end time\r\n\r\n    function createProject(string memory _name) external {\r\n        require(block.timestamp < roundEndTime, \"Funding round has ended\");\r\n        projectCount++;\r\n        Project storage newProject = projects[projectCount]; // projects will has default value like 0, 0x\r\n        newProject.owner = payable(msg.sender);\r\n        newProject.name = _name;\r\n        emit ProjectCreated(projectCount, _name, msg.sender);\r\n    }\r\n\r\n    // This function allows users to create a new project\r\n\r\n    function contribute(uint256 _projectId) external payable {\r\n        require(block.timestamp < roundEndTime, \"Funding round has ended\");\r\n        require(\r\n            _projectId > 0 && _projectId <= projectCount,\r\n            \"Invalid project ID\"\r\n        );\r\n        require(msg.value > 0, \"Contribution must be greater than 0\");\r\n\r\n        Project storage project = projects[_projectId];\r\n        if (project.contributions[msg.sender] == 0) {\r\n            project.contributorsCount++;\r\n        }\r\n        project.contributions[msg.sender] += msg.value;\r\n        project.totalContributions += msg.value;\r\n\r\n        emit ContributionMade(_projectId, msg.sender, msg.value);\r\n    }\r\n\r\n    // This function allows users to contribute to a project\r\n\r\n    function addToMatchingPool() external payable {\r\n        // anyone can add to matching pool\r\n        matchingPool += msg.value;\r\n    }\r\n\r\n    // This function allows the owner to add funds to the matching pool\r\n\r\n    function calculateMatchingAmount(\r\n        uint256 _projectId\r\n    ) public view returns (uint256) {\r\n        Project storage project = projects[_projectId];\r\n        uint256 sqrtSum = 0;\r\n        uint256 projectValue = 0;\r\n\r\n        for (uint256 i = 1; i <= projectCount; i++) {\r\n            uint256 value = sqrt(\r\n                projects[i].totalContributions * projects[i].contributorsCount\r\n            );\r\n            sqrtSum += value * value;\r\n            if (i == _projectId) {\r\n                projectValue = value;\r\n            }\r\n        }\r\n\r\n        return (projectValue * projectValue * matchingPool) / sqrtSum;\r\n    }\r\n\r\n    // This function calculates the matching amount for a project based on quadratic funding formula\r\n\r\n    function distributeMatching() external onlyOwner {\r\n        require(\r\n            block.timestamp >= roundEndTime,\r\n            \"Funding round has not ended yet\"\r\n        );\r\n\r\n        for (uint256 i = 1; i <= projectCount; i++) {\r\n            uint256 matchingAmount = calculateMatchingAmount(i);\r\n            projects[i].owner.transfer(matchingAmount);\r\n            emit MatchingDistributed(i, matchingAmount);\r\n        }\r\n\r\n        matchingPool = 0;\r\n    }\r\n\r\n    // This function distributes the matching funds to projects after the round ends\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    // This is a helper function to calculate the square root of a number\r\n\r\n    function getProjectDetails(\r\n        uint256 _projectId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address owner,\r\n            string memory name,\r\n            uint256 totalContributions,\r\n            uint256 contributorsCount,\r\n            uint256 matchingAmount,\r\n            uint256 totalAmount\r\n        )\r\n    {\r\n        Project storage project = projects[_projectId];\r\n        uint256 matching = calculateMatchingAmount(_projectId);\r\n        uint256 total = project.totalContributions + matching;\r\n        return (\r\n            project.owner,\r\n            project.name,\r\n            project.totalContributions,\r\n            project.contributorsCount,\r\n            matching,\r\n            total\r\n        );\r\n    }\r\n\r\n    // This function returns the details of a specific project\r\n\r\n    function getContribution(\r\n        uint256 _projectId,\r\n        address _contributor\r\n    ) external view returns (uint256) {\r\n        return projects[_projectId].contributions[_contributor];\r\n    }\r\n\r\n    // This function returns the contribution amount of a specific contributor to a specific project\r\n\r\n    function calculateTotalAmount(\r\n        uint256 _projectId\r\n    ) public view returns (uint256) {\r\n        Project storage project = projects[_projectId];\r\n        uint256 matchingAmount = calculateMatchingAmount(_projectId);\r\n        return project.totalContributions + matchingAmount;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}